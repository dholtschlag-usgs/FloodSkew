ndxIaN <-  which(is.na(dfHrFlowSeries$Water.Level)==FALSE)
ndxNaN <-  which(is.na(dfHrFlowSeries$Water.Level)==TRUE)
#
if (length(ndxNaN)>0) {
dfHrFlowSeries$Water.Level[ndxNaN] <- interp1(c(as.numeric(dfHrFlowSeries$dateHourSeq[ndxIaN])),
c(dfHrFlowSeries$Water.Level[ndxIaN]),
c(as.numeric(dfHrFlowSeries$dateHourSeq[ndxNaN])),
method="pchip")
}
#
# Plot the hourly values during the selected time period
# Plot the selected time series
plot(dfHrFlowSeries$dateHourSeq[ndxIaN],dfHrFlowSeries$Water.Level[ndxIaN],
pch=16,col="blue",cex=0.5,xlab=wYear,ylab="Flow, in cubic feet per second",
main="Hourly Water Levels at NOAA 9063090 Fermi Power Plant")
points(dfHrFlowSeries$dateHourSeq[ndxNaN],dfHrFlowSeries$Water.Level[ndxNaN],
pch=16,col="red",cex=0.75)
legend("bottomright",legend=c("Measured","Estimated"),col=c("blue","red"),pch=c(16,16),cex=.75)
#
# Compute the ACF of hourly water levels
par(cex.main=0.9)
acf(dfHrFlowSeries$Water.Level,lag.max=24*3,type="correlation",xlab="lag time, in hours",
ylab="Autocorrelation Coefficient",
main=paste("ACF of Hourly Water Levels at NOAA 9063090 Fermi Power Plant\n",
"from ",dateBeg," to ",dateEnd,sep=""))
#
pacf(dfHrFlowSeries$Water.Level,lag.max=24*3,xlab="lag time, in hours",
ylab="Partial Autocorrelation Coefficient",
main=paste("PACF of Hourly Water Levels at NOAA 9063090 Fermi Power Plant\n",
"from ",dateBeg," to ",dateEnd,sep=""))
#
# Plot the differenced time series
plot(dfHrFlowSeries$dateHourSeq[2:length(dfHrFlowSeries$dateHourSeq)],
diff(dfHrFlowSeries$Water.Level),
pch=16,col="blue",cex=0.5,xlab=wYear,ylab="Water Level, in feet above IGLD85",
main="Lag1 Differenced Hourly Water Levels at 9063090 Fermi Power Plant, MI")
abline(h=0,lty="dashed",col="red")
# Compute the ACF of lag1 differenced hourly water levels
par(cex.main=0.9)
acf(diff(dfHrFlowSeries$Water.Level),lag.max=24*3,type="correlation",xlab="lag time, in hours",
ylab="Autocorrelation Coefficient",
main=paste("ACF of Lag1 Differenced Hourly Water Levels at NOAA 9063090 \n",
"Fermi Power Plant from ",dateBeg," to ",dateEnd,sep=""))
#
pacf(diff(dfHrFlowSeries$Water.Level),lag.max=24*3,xlab="lag time, in hours",
ylab="Partial Autocorrelation Coefficient",
main=paste("PACF of Lag1 Differenced Hourly Water Levels at NOAA 9063090 \n",
"Fermi Power Plant from ",dateBeg," to ",dateEnd,sep=""))
#
junk <- ccf(diff(dfHrFlowSeries$detMeanQ),diff(dfHrFlowSeries$Water.Level),lag.max=3*24,
xlab="lag, in hours",ylab="CCF Coefficient",
main=paste("Cross Correlation Function of Lag1 Differenced Hourly Flows on ",
"Detroit River \nand Lag1 Differenced Water Levels at Fermi Power Plant in ",
wYear,sep=""));
fa <- fft(diff(dfHrFlowSeries$detMeanQ))
fa[1:3]
fa[4391-3:end]
fa[4391-3:4391]
fa[(4391-3):4391]
fa[1:3]
fa[(4391-4):4391]
fa[(4391-3):4391]
fa[1:4]
View(dfHrFlowSeries)
dFlow
dFlow = diff(dfHrFlowSeries$detMeanQ)
dFlow[1]
fa = fft(dFlow)
fa[1:4]
plot(abs(fa))
plot(fftshift(abs(fa)))
install.packages("waved")
library("waved", lib.loc="C:/Users/dholtsch/Documents/R/win-library/3.0")
plot(fftshift(abs(fa)))
plot(fftshift(abs(fa)),pch=16,col="blue",cex=.5)
periodFlow <- periodogram(diff(dfHrFlowSeries$detMeanQ),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency",lwd=1,col="red",
main=paste("Lag 1 Differenced Hourly Flows of Detroit River in",wYear))
str(periodFlow)
which(abs(periodFlow$spec)==max(abs(periodFlow$spec)))
periodFlow$freq[362]
periodFlow$freq[2250]
abs(periodFlow$spec[362])
1/24
1/96
abs(periodFlow$freq[1])
1/abs(periodFlow$freq[1])
24*180
1/0.00804444
1/0.0804444
source('C:/Home/Projects/ConnectChannels/Analysis/CrossCorr/computeXcorr.R')
periodWLevel$spec[362]
1/24*4500
4500/24
4500/187.
4500/187.5
periodFlow <- periodogram((dfHrFlowSeries$detMeanQ),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency",lwd=1,col="red",
main=paste("Lag 1 Differenced Hourly Flows of Detroit River in",wYear))
which(periodFlow$spec>1.7e10)
periodFlow <- periodogram(diff(dfHrFlowSeries$detMeanQ),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency",lwd=1,col="red",
main=paste("Lag 1 Differenced Hourly Flows of Detroit River in",wYear))
50000 * .0035
50000 * .01
periodWLevel <- periodogram(diff(dfHrFlowSeries$Water.Level),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency in cycles per hour",lwd=1,col="blue",
main=paste("Lag 1 Differenced Hourly Water Levels at Fermi in",wYear))
which(abs(periodWLevel$spec>1.5)
)
which(abs(periodWLevel$spec)>1.5)
ndx <- which(abs(periodWLevel$spec)>1.5)
ndx <- 1/abs(periodWLevel$spec[ndx])
1/abs(periodWLevel$spec[ndx])
1/abs(periodWLevel$freq[ndx])
ndxMaxSpecWLevel <- which(periodWLevel$spec>1.5)
ndx
ndx <- which(abs(periodWLevel$spec)>1.5)
ndx
1/abs(periodWLevel$freq[ndx])
ndx <- which(abs(periodWLevel$spec)>1.)
1/abs(periodWLevel$freq[ndx])
periodWLevel <- periodogram((dfHrFlowSeries$Water.Level),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency in cycles per hour",lwd=1,col="blue",
main=paste("Lag 1 Differenced Hourly Water Levels at Fermi in",wYear))
periodWLevel <- periodogram(diff(dfHrFlowSeries$Water.Level),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency in cycles per hour",lwd=1,col="blue",
main=paste("Lag 1 Differenced Hourly Water Levels at Fermi in",wYear))
periodFlow <- periodogram(diff(dfHrFlowSeries$detMeanQ),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency",lwd=1,col="red",
main=paste("Lag 1 Differenced Hourly Flows of Detroit River in",wYear))
periodFlow <- periodogram((dfHrFlowSeries$detMeanQ),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency",lwd=1,col="red",
main=paste("Hourly Flows of Detroit River in",wYear))
plot(periodFlow$freq,abs(periodFlow$spec))
periodFlow <- periodogram((diff(dfHrFlowSeries$detMeanQ),log='no',plot=TRUE,ylab="Periodogram",
xlab="Frequency",lwd=1,col="red",
main=paste("Lag1 Differenced Hourly Flows of Detroit River in",wYear))
periodFlow <- periodogram(diff(dfHrFlowSeries$detMeanQ),log='no',
plot=TRUE,ylab="Periodogram",
xlab="Frequency",lwd=1,col="red",
main=paste("Lag1 Differenced Hourly Flows of Detroit River in",wYear))
plot(periodFlow$freq,abs(periodFlow$spec)),pch=16,cex=0.5,col="blue",type="blank")
plot(periodFlow$freq,abs(periodFlow$spec),pch=16,cex=0.5,col="blue",type="blank")
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.0080444,col="forestgreen")
abline(v=0.080444,col="forestgreen")
abline(v=0.060000,col="orange")
1/14.173
1/14.173
abline(v=0.0705567,col="orange")
1/9.2
1/9.2
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank",
main="Cumulative Spectral Density of Lag1 Differenced Hourly Flows on Detroit River",
ylab="Cumulative Spectra",xlab="Frequency")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
text(0.081,2e11,'12.4 hr/cycle',col="forestgreen")
text(0.081,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
text(0.08,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank",
main="Cumulative Spectral Density of Lag1 Differenced Hourly Flows on Detroit River",
ylab="Cumulative Spectra",xlab="Frequency")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
text(0.08,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
text(0.1,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank",
main="Cumulative Spectral Density of Lag1 Differenced Hourly Flows on Detroit River",
ylab="Cumulative Spectra",xlab="Frequency")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
text(0.11,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
abline(v=0.0705567,col="orange");                # 14.173 hours/cycle
text(0.11,2e11,'14.2 hr/cycle',col="orange",offset=0,cex=0.6)
text(0.11,1.8e11,'14.2 hr/cycle',col="orange",offset=0,cex=0.6)
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank",
main="Cumulative Spectral Density of Lag1 Differenced Hourly Flows on Detroit River",
ylab="Cumulative Spectra",xlab="Frequency")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
text(0.11,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
abline(v=0.0705567,col="orange");                # 14.173 hours/cycle
text(0.11,1.8e11,'14.2 hr/cycle',col="orange",offset=0,cex=0.6)
colors()
1/.065
1/15
abline(v=0.0666667,col="steelblue");                # 14.173 hours/cycle
text(0.11,1.6e11,'15.0 hr/cycle',col="steelblue",offset=0,cex=0.6)
1/16
1/16
abline(v=0.062500,col="steelblue");                # 14.173 hours/cycle
text(0.11,1.6e11,'16.0 hr/cycle',col="steelblue",offset=0,cex=0.6)
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank",
main="Cumulative Spectral Density of Lag1 Differenced Hourly Flows on Detroit River",
ylab="Cumulative Spectra",xlab="Frequency")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
text(0.11,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
abline(v=0.0705567,col="orange");                # 14.173 hours/cycle
text(0.11,1.8e11,'14.2 hr/cycle',col="orange",offset=0,cex=0.6)
abline(v=0.062500,col="steelblue");                # 14.173 hours/cycle
text(0.11,1.6e11,'16.0 hr/cycle',col="steelblue",offset=0,cex=0.6)
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank",
main="Cumulative Spectral Density of Lag1 Differenced Hourly Flows on Detroit River",
ylab="Cumulative Spectra",xlab="Frequency")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
text(0.120,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
abline(v=0.0705567,col="orange");                # 14.173 hours/cycle
text(0.115,1.8e11,'14.2 hr/cycle',col="orange",offset=0,cex=0.6)
abline(v=0.062500,col="steelblue");                # 14.173 hours/cycle
text(0.110,1.6e11,'16.0 hr/cycle',col="steelblue",offset=0,cex=0.6)
plot(periodFlow$freq,cumsum(abs(periodFlow$spec)),
pch=16,cex=0.5,col="blue",type="blank",
main="Cumulative Spectral Density of Lag1 Differenced Hourly Flows on Detroit River",
ylab="Cumulative Spectra",xlab="Frequency")
abline(0,4e11,col="red",lty="dashed")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
text(0.120,2e11,'12.4 hr/cycle',col="forestgreen",offset=0,cex=0.6)
abline(v=0.0705567,col="salmon");                # 14.173 hours/cycle
text(0.115,1.8e11,'14.2 hr/cycle',col="salmon",offset=0,cex=0.6)
abline(v=0.062500,col="steelblue");                # 14.173 hours/cycle
text(0.110,1.6e11,'16.0 hr/cycle',col="steelblue",offset=0,cex=0.6)
1/24
1/24
colors()
abline(v=1/24,col="brown")
abline(v=0.080444,col="forestgreen");            # 12.400 hours/cycle
sum(1:25)
29/325
q()
da
1.2/1.1
View(Cuyahoga)
boxcox(Cuyahoga$Flow)
library("MASS", lib.loc="C:/Program Files/R/R-3.0.1/library")
boxcox(Cuyahoga$Flow)
boxplot(Cuyahoga$Flow)
junk <- as.vectory(Cuyahoga$Flow)
junk <- as.vector(Cuyahoga$Flow)
boxcox(junk)
boxcox(SuspSedi ~ log(Flow),data=Cuyahoga,lambda = seq(-0.25,0.25,length=10))
junkBoxcox <- boxcox(SuspSedi ~ log(Flow),data=Cuyahoga,lambda = seq(-0.25,0.25,length=10))
junkBoxcox
which(junkBoxcox$y==min(junkBoxcox$y))
which(junkBoxcox$y==max(junkBoxcox$y))
junkBoxcox$x[19]
boxplot(Cuyahoga$SuspSedi^-0.1590909)
plot(log(Cuyahoga$Flow),Cuyahoga$SuspSedi^-0.1590909)
plot(log(Cuyahoga$Flow),Cuyahoga$SuspSedi^-0.1590909,pch=16,col="blue")
plot(log(Cuyahoga$Flow),Cuyahoga$SuspSedi^-0.1590909,pch=16,col="blue",cex=.25)
x^-0.15
3^-0.15
.8480702^-1/.15
3^10.15
3^-0.15
.8480702^1/.15
.8480702^.15
.8480702^1/.15
0.8480702^0.15
0.8480702^1/0.15
q()
q()
q()
pathName <- "c:\Home\Projects\DataUncertainty\Data\04112500fieldmeasurements.txt"
dfrm1  <- read.table(file=pathname,sep="\t",header=TRUE,as.is = !stringsAsFactors,
comment.char="#")
pathName <- "c:\Home\Projects\DataUncertainty\Data\04112500fieldmeasurements.txt"
pathName <- "c:/Home/Projects/DataUncertainty/Data/04112500fieldmeasurements.txt"
dfrm1  <- read.table(file=pathname,sep="\t",header=TRUE,as.is = !stringsAsFactors,
comment.char="#")
dfrm1  <- read.table(file=pathName,sep="\t",header=TRUE,as.is = !stringsAsFactors,
comment.char="#")
dfrm1  <- read.table(file=pathName,sep="\t",header=TRUE,
comment.char="#")
View(dfrm1)
dfrm1  <- dfrm1[-1,]
View(dfrm1)
pathName <- "c:/Home/Projects/DataUncertainty/Data/04112500fieldmeasurements.txt"
dfrm1  <- read.table(file=pathName,sep="\t",header=TRUE,
comment.char="#")
View(dfrm1)
str(dfrm1)
pathName <- "c:/Home/Projects/DataUncertainty/Data/04112500fieldmeasurements.txt"
dfrm1  <- read.table(file=pathName,sep="\t",header=TRUE,
comment.char=c("#","5")
)
dfrm1  <- read.table(file=pathName,sep="\t",header=TRUE,
comment.char=c("#","5"))
dfrm1  <- read.table(file=pathName,sep="\t",header=TRUE,
comment.char="#")
View(dfrm1)
str(dfrm1)
n <- 150 # number of data points
p <- 2 # dimension
sigma <- 1 # variance of the distribution
meanpos <- 0 # centre of the distribution of positive examples
meanneg <- 3 # centre of the distribution of negative examples
npos <- round(n/2) # number of positive examples
nneg <- n-npos # number of negative examples
# Generate the positive and negative examples
xpos <- matrix(rnorm(npos*p,mean=meanpos,sd=sigma),npos,p)
xneg <- matrix(rnorm(nneg*p,mean=meanneg,sd=sigma),npos,p)
x <- rbind(xpos,xneg)
# Generate the labels
y <- matrix(c(rep(1,npos),rep(-1,nneg)))
# Visualize the data
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
# Visualize
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c('Positive Train','Positive Test','Negative Train','Negative Test'),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
n <- 150 # number of data points
p <- 2 # dimension
sigma <- 1 # variance of the distribution
meanpos <- 0 # centre of the distribution of positive examples
meanneg <- 3 # centre of the distribution of negative examples
npos <- round(n/2) # number of positive examples
nneg <- n-npos # number of negative examples
# Generate the positive and negative examples
xpos <- matrix(rnorm(npos*p,mean=meanpos,sd=sigma),npos,p)
xneg <- matrix(rnorm(nneg*p,mean=meanneg,sd=sigma),npos,p)
x <- rbind(xpos,xneg)
# Generate the labels
y <- matrix(c(rep(1,npos),rep(-1,nneg)))
# Visualize the data
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
## Prepare a training and a test set ##
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
## Prepare a training and a test set ##
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
# Visualize
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c('Positive Train','Positive Test','Negative Train','Negative Test'),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
ytest <- y[-tindex]
istrain=rep(0,n)
istrain[tindex]=1
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c('Positive Train','Positive Test','Negative Train','Negative Test'),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
# load the kernlab package
library(kernlab)
# train the SVM
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladot',C=100,scaled=c())
install.packages("kernlab")
library(kernlab,‘C:/Users/dholtsch/Documents/R/win-library/3.0’)
library("kernlab",‘C:/Users/dholtsch/Documents/R/win-library/3.0’)
library("kernlab", lib.loc="C:/Users/dholtsch/Documents/R/win-library/3.0")
library("kernlab", lib.loc="C:/Users/dholtsch/Documents/R/win-library/3.0")
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladot',C=100,scaled=c())
summary(svp)
svp
print(svp)
ypred = predict(svp,xtest)
table(ytest,ypred)
# Compute accuracy
sum(ypred==ytest)/length(ytest)
# Compute at the prediction scores
ypredscore = predict(svp,xtest,type="decision")
plot(svp)
abline(svp)
abline(reg=svp)
attributes(svp)
alpha(svp)
alphaindex(svp)
b(svp)
coef(svp)
plot(svp,data=xtrain)
ypred <- predict(svp,xtest)
table(ytest,ypred)
sum(ytest==ypred)/length(ytest)
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladot',C=100,scaled=c())
print(svp)
# Predict labels on test
ypred = predict(svp,xtest)
table(ytest,ypred)
# Compute accuracy
sum(ypred==ytest)/length(ytest)
# Compute at the prediction scores
ypredscore = predict(svp,xtest,type="decision")
plot(svp)
plot(svp,data=xtrain)
svp1 <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladot',C=100,scaled=c())
print(svp1)
plot(svp1)
getwd()
setwd("C:/Home/Projects/FloodSkew/Analysis/R/FloodSkew")
library("ProjectTemplate")
load.project()
# Put miGagesIIa.txt into easy format
gages = read.table("./data/miGagesIIa.txt", sep="\t",header=TRUE,
colClasses=c("character","character"))
gages[1:3,]
gages[1:3,1]
nGages = nrow(gages)
Gages[1,:]
Gages[1,:]
gages[1,:]
gages[1:3,1]
gages[1:3,]
cat(gages[1,:]
gages[1,:]
gages[1,]
cat(gages[1,1])
for (i in 1:nGages){
cat(gages[1,1])
}
for (i in 1:nGages){
cat(gages[i,1],"\n")
}
myUrla <- "http://nwis.waterdata.usgs.gov/nwis/peak/?site_no="
myUrlb <- "&agency_cd=USGS&amp"
paste(myUrla,gages[i,1],myUrlb,sep="")
yUrla <- "http://nwis.waterdata.usgs.gov/nwis/peak/?site_no="
myUrlb <- "&agency_cd=USGS&format=hn2"
close(con)
myUrla <- "http://nwis.waterdata.usgs.gov/nwis/peak/?site_no="
myUrlb <- "&agency_cd=USGS&format=hn2"
paste(myUrla,gages[i,1],myUrlb,sep="")
myUrla <- "http://nwis.waterdata.usgs.gov/nwis/peak?site_no="
myUrlb <- "&agency_cd=USGS&format=hn2"
paste(myUrla,gages[i,1],myUrlb,sep="")
con = url(paste(myUrla,gages[i,1],myUrlb,sep=""))
peakTable <- read.table(paste(myUrla,gages[i,1],myUrlb,sep=""),sep="")
peakTable <- readLines(paste(myUrla,gages[i,1],myUrlb,sep=""))
peakTable
writeLines(peakTable)
writeLines(peakTable, con = "mytestfile.txt")
writeLines(peakTable, con = "./data/Raw/mytestfile.txt")
nGages <- 3
for (i in 1:nGages){
cat(gages[i,1],"\n")
peakTable <- readLines(paste(myUrla,gages[i,1],myUrlb,sep=""))
writeLines(peakTable, con = paste("./data/Raw/pk",gage[i,1],".txt"))
}
for (i in 1:nGages){
cat(gages[i,1],"\n")
peakTable <- readLines(paste(myUrla,gages[i,1],myUrlb,sep=""))
writeLines(peakTable, con = paste("./data/Raw/pk",gages[i,1],".txt"))
}
nGages <- 3
for (i in 1:nGages){
cat(gages[i,1],"\n")
peakTable <- readLines(paste(myUrla,gages[i,1],myUrlb,sep=""))
writeLines(peakTable, con = paste("./data/Raw/pk",gages[i,1],".txt",sep=""))
}
for (i in 4:nGages){
cat(gages[i,1],"\n")
peakTable <- readLines(paste(myUrla,gages[i,1],myUrlb,sep=""))
writeLines(peakTable, con = paste("./data/Raw/pk",gages[i,1],".txt",sep=""))
}
nGages = nrow(gages)
for (i in 1:nGages){
cat(gages[i,1],"\n")
peakTable <- readLines(paste(myUrla,gages[i,1],myUrlb,sep=""))
writeLines(peakTable, con = paste("./data/Raw/pk",gages[i,1],".txt",sep=""))
}
paste("c:\Software\PeakfqSA_Windows_998\PeakfqSA998",
" ./data/input/TestCase02.spc"),sep="")
paste("c:\Software\PeakfqSA_Windows_998\PeakfqSA998",
" ./data/input/TestCase02.spc",sep="")
paste("c:\Software\PeakfqSA_Windows_998\PeakfqSA998",
" ./data/input/TestCase02.spc")
paste("c:/Software/PeakfqSA_Windows_998/PeakfqSA998",
" ./data/input/TestCase02.spc")
system(paste("c:/Software/PeakfqSA_Windows_998/PeakfqSA998",
" ./data/Raw/TestCase02.spc"))
setwd("./data/Raw/")
getwd()
ls
ls())
ls()
pwd
getwd()
dir
dir()
paste("PeakfqSA998"," TestCase02.spc")
system(paste("PeakfqSA998"," TestCase02.spc"))
getwd()
paste("PeakfqSA998"," TestCase02.spc")
system(paste("PeakfqSA998"," TestCase02.spc"))
paste("PeakfqSA998","< TestCase02.spc")
system(paste("PeakfqSA998","< TestCase02.spc"))
system(paste("PeakfqSA998 TestCase02.spc"))
system(paste("PeakfqSA0998 TestCase02.spc"))
gages[1:3,]
